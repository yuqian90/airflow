<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1798" onload="init(evt)" viewBox="0 0 1200 1798" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = true;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1798" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">py-spy</text><text id="details" x="10" y="1781.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="1781.00"> </text><svg id="frames" x="10" width="1180"><g><title>&lt;module&gt; (pandas/core/frame.py:115) (18 samples, 1.80%)</title><rect x="1.9038%" y="1284" width="1.8036%" height="15" fill="rgb(227,0,7)"/><text x="2.1538%" y="1294.50">&lt;..</text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:971) (18 samples, 1.80%)</title><rect x="1.9038%" y="1300" width="1.8036%" height="15" fill="rgb(217,0,24)"/><text x="2.1538%" y="1310.50">_..</text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:955) (18 samples, 1.80%)</title><rect x="1.9038%" y="1316" width="1.8036%" height="15" fill="rgb(221,193,54)"/><text x="2.1538%" y="1326.50">_..</text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:665) (18 samples, 1.80%)</title><rect x="1.9038%" y="1332" width="1.8036%" height="15" fill="rgb(248,212,6)"/><text x="2.1538%" y="1342.50">_..</text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:678) (18 samples, 1.80%)</title><rect x="1.9038%" y="1348" width="1.8036%" height="15" fill="rgb(208,68,35)"/><text x="2.1538%" y="1358.50">e..</text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (18 samples, 1.80%)</title><rect x="1.9038%" y="1364" width="1.8036%" height="15" fill="rgb(232,128,0)"/><text x="2.1538%" y="1374.50">_..</text></g><g><title>&lt;module&gt; (pandas/core/series.py:84) (15 samples, 1.50%)</title><rect x="2.2044%" y="1380" width="1.5030%" height="15" fill="rgb(207,160,47)"/><text x="2.4544%" y="1390.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:971) (15 samples, 1.50%)</title><rect x="2.2044%" y="1396" width="1.5030%" height="15" fill="rgb(228,23,34)"/><text x="2.4544%" y="1406.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:955) (15 samples, 1.50%)</title><rect x="2.2044%" y="1412" width="1.5030%" height="15" fill="rgb(218,30,26)"/><text x="2.4544%" y="1422.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:665) (15 samples, 1.50%)</title><rect x="2.2044%" y="1428" width="1.5030%" height="15" fill="rgb(220,122,19)"/><text x="2.4544%" y="1438.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:678) (15 samples, 1.50%)</title><rect x="2.2044%" y="1444" width="1.5030%" height="15" fill="rgb(250,228,42)"/><text x="2.4544%" y="1454.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (15 samples, 1.50%)</title><rect x="2.2044%" y="1460" width="1.5030%" height="15" fill="rgb(240,193,28)"/><text x="2.4544%" y="1470.50"></text></g><g><title>&lt;module&gt; (pandas/plotting/__init__.py:59) (15 samples, 1.50%)</title><rect x="2.2044%" y="1476" width="1.5030%" height="15" fill="rgb(216,20,37)"/><text x="2.4544%" y="1486.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:971) (15 samples, 1.50%)</title><rect x="2.2044%" y="1492" width="1.5030%" height="15" fill="rgb(206,188,39)"/><text x="2.4544%" y="1502.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:955) (15 samples, 1.50%)</title><rect x="2.2044%" y="1508" width="1.5030%" height="15" fill="rgb(217,207,13)"/><text x="2.4544%" y="1518.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:665) (15 samples, 1.50%)</title><rect x="2.2044%" y="1524" width="1.5030%" height="15" fill="rgb(231,73,38)"/><text x="2.4544%" y="1534.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:678) (15 samples, 1.50%)</title><rect x="2.2044%" y="1540" width="1.5030%" height="15" fill="rgb(225,20,46)"/><text x="2.4544%" y="1550.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (15 samples, 1.50%)</title><rect x="2.2044%" y="1556" width="1.5030%" height="15" fill="rgb(210,31,41)"/><text x="2.4544%" y="1566.50"></text></g><g><title>&lt;module&gt; (pandas/plotting/_core.py:17) (15 samples, 1.50%)</title><rect x="2.2044%" y="1572" width="1.5030%" height="15" fill="rgb(221,200,47)"/><text x="2.4544%" y="1582.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:971) (15 samples, 1.50%)</title><rect x="2.2044%" y="1588" width="1.5030%" height="15" fill="rgb(226,26,5)"/><text x="2.4544%" y="1598.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:955) (15 samples, 1.50%)</title><rect x="2.2044%" y="1604" width="1.5030%" height="15" fill="rgb(249,33,26)"/><text x="2.4544%" y="1614.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:665) (15 samples, 1.50%)</title><rect x="2.2044%" y="1620" width="1.5030%" height="15" fill="rgb(235,183,28)"/><text x="2.4544%" y="1630.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:678) (15 samples, 1.50%)</title><rect x="2.2044%" y="1636" width="1.5030%" height="15" fill="rgb(221,5,38)"/><text x="2.4544%" y="1646.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (15 samples, 1.50%)</title><rect x="2.2044%" y="1652" width="1.5030%" height="15" fill="rgb(247,18,42)"/><text x="2.4544%" y="1662.50"></text></g><g><title>&lt;module&gt; (pandas/plotting/_matplotlib/__init__.py:3) (15 samples, 1.50%)</title><rect x="2.2044%" y="1668" width="1.5030%" height="15" fill="rgb(241,131,45)"/><text x="2.4544%" y="1678.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:971) (15 samples, 1.50%)</title><rect x="2.2044%" y="1684" width="1.5030%" height="15" fill="rgb(249,31,29)"/><text x="2.4544%" y="1694.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:955) (15 samples, 1.50%)</title><rect x="2.2044%" y="1700" width="1.5030%" height="15" fill="rgb(225,111,53)"/><text x="2.4544%" y="1710.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:665) (15 samples, 1.50%)</title><rect x="2.2044%" y="1716" width="1.5030%" height="15" fill="rgb(238,160,17)"/><text x="2.4544%" y="1726.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:678) (15 samples, 1.50%)</title><rect x="2.2044%" y="1732" width="1.5030%" height="15" fill="rgb(214,148,48)"/><text x="2.4544%" y="1742.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (15 samples, 1.50%)</title><rect x="2.2044%" y="1748" width="1.5030%" height="15" fill="rgb(232,36,49)"/><text x="2.4544%" y="1758.50"></text></g><g><title>&lt;module&gt; (pandas/core/groupby/generic.py:44) (28 samples, 2.81%)</title><rect x="1.5030%" y="1188" width="2.8056%" height="15" fill="rgb(209,103,24)"/><text x="1.7530%" y="1198.50">&lt;m..</text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:971) (28 samples, 2.81%)</title><rect x="1.5030%" y="1204" width="2.8056%" height="15" fill="rgb(229,88,8)"/><text x="1.7530%" y="1214.50">_f..</text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:955) (28 samples, 2.81%)</title><rect x="1.5030%" y="1220" width="2.8056%" height="15" fill="rgb(213,181,19)"/><text x="1.7530%" y="1230.50">_f..</text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:665) (28 samples, 2.81%)</title><rect x="1.5030%" y="1236" width="2.8056%" height="15" fill="rgb(254,191,54)"/><text x="1.7530%" y="1246.50">_l..</text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:678) (24 samples, 2.40%)</title><rect x="1.9038%" y="1252" width="2.4048%" height="15" fill="rgb(241,83,37)"/><text x="2.1538%" y="1262.50">ex..</text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (24 samples, 2.40%)</title><rect x="1.9038%" y="1268" width="2.4048%" height="15" fill="rgb(233,36,39)"/><text x="2.1538%" y="1278.50">_c..</text></g><g><title>&lt;module&gt; (pandas/core/api.py:24) (29 samples, 2.91%)</title><rect x="1.5030%" y="996" width="2.9058%" height="15" fill="rgb(226,3,54)"/><text x="1.7530%" y="1006.50">&lt;m..</text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:971) (29 samples, 2.91%)</title><rect x="1.5030%" y="1012" width="2.9058%" height="15" fill="rgb(245,192,40)"/><text x="1.7530%" y="1022.50">_f..</text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:955) (29 samples, 2.91%)</title><rect x="1.5030%" y="1028" width="2.9058%" height="15" fill="rgb(238,167,29)"/><text x="1.7530%" y="1038.50">_f..</text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:665) (29 samples, 2.91%)</title><rect x="1.5030%" y="1044" width="2.9058%" height="15" fill="rgb(232,182,51)"/><text x="1.7530%" y="1054.50">_l..</text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:678) (29 samples, 2.91%)</title><rect x="1.5030%" y="1060" width="2.9058%" height="15" fill="rgb(231,60,39)"/><text x="1.7530%" y="1070.50">ex..</text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (29 samples, 2.91%)</title><rect x="1.5030%" y="1076" width="2.9058%" height="15" fill="rgb(208,69,12)"/><text x="1.7530%" y="1086.50">_c..</text></g><g><title>&lt;module&gt; (pandas/core/groupby/__init__.py:1) (29 samples, 2.91%)</title><rect x="1.5030%" y="1092" width="2.9058%" height="15" fill="rgb(235,93,37)"/><text x="1.7530%" y="1102.50">&lt;m..</text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:971) (29 samples, 2.91%)</title><rect x="1.5030%" y="1108" width="2.9058%" height="15" fill="rgb(213,116,39)"/><text x="1.7530%" y="1118.50">_f..</text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:955) (29 samples, 2.91%)</title><rect x="1.5030%" y="1124" width="2.9058%" height="15" fill="rgb(222,207,29)"/><text x="1.7530%" y="1134.50">_f..</text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:665) (29 samples, 2.91%)</title><rect x="1.5030%" y="1140" width="2.9058%" height="15" fill="rgb(206,96,30)"/><text x="1.7530%" y="1150.50">_l..</text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:678) (29 samples, 2.91%)</title><rect x="1.5030%" y="1156" width="2.9058%" height="15" fill="rgb(218,138,4)"/><text x="1.7530%" y="1166.50">ex..</text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (29 samples, 2.91%)</title><rect x="1.5030%" y="1172" width="2.9058%" height="15" fill="rgb(250,191,14)"/><text x="1.7530%" y="1182.50">_c..</text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:674) (19 samples, 1.90%)</title><rect x="4.8096%" y="1300" width="1.9038%" height="15" fill="rgb(239,60,40)"/><text x="5.0596%" y="1310.50">e..</text></g><g><title>get_code (&lt;frozen importlib._bootstrap_external&gt;:779) (19 samples, 1.90%)</title><rect x="4.8096%" y="1316" width="1.9038%" height="15" fill="rgb(206,27,48)"/><text x="5.0596%" y="1326.50">g..</text></g><g><title>_compile_bytecode (&lt;frozen importlib._bootstrap_external&gt;:487) (19 samples, 1.90%)</title><rect x="4.8096%" y="1332" width="1.9038%" height="15" fill="rgb(225,35,8)"/><text x="5.0596%" y="1342.50">_..</text></g><g><title>&lt;module&gt; (pandas/core/arrays/__init__.py:10) (26 samples, 2.61%)</title><rect x="4.6092%" y="1140" width="2.6052%" height="15" fill="rgb(250,213,24)"/><text x="4.8592%" y="1150.50">&lt;m..</text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:971) (26 samples, 2.61%)</title><rect x="4.6092%" y="1156" width="2.6052%" height="15" fill="rgb(247,123,22)"/><text x="4.8592%" y="1166.50">_f..</text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:955) (26 samples, 2.61%)</title><rect x="4.6092%" y="1172" width="2.6052%" height="15" fill="rgb(231,138,38)"/><text x="4.8592%" y="1182.50">_f..</text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:665) (26 samples, 2.61%)</title><rect x="4.6092%" y="1188" width="2.6052%" height="15" fill="rgb(231,145,46)"/><text x="4.8592%" y="1198.50">_l..</text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:678) (26 samples, 2.61%)</title><rect x="4.6092%" y="1204" width="2.6052%" height="15" fill="rgb(251,118,11)"/><text x="4.8592%" y="1214.50">ex..</text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (26 samples, 2.61%)</title><rect x="4.6092%" y="1220" width="2.6052%" height="15" fill="rgb(217,147,25)"/><text x="4.8592%" y="1230.50">_c..</text></g><g><title>&lt;module&gt; (pandas/core/arrays/interval.py:38) (25 samples, 2.51%)</title><rect x="4.7094%" y="1236" width="2.5050%" height="15" fill="rgb(247,81,37)"/><text x="4.9594%" y="1246.50">&lt;m..</text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:971) (25 samples, 2.51%)</title><rect x="4.7094%" y="1252" width="2.5050%" height="15" fill="rgb(209,12,38)"/><text x="4.9594%" y="1262.50">_f..</text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:955) (24 samples, 2.40%)</title><rect x="4.8096%" y="1268" width="2.4048%" height="15" fill="rgb(227,1,9)"/><text x="5.0596%" y="1278.50">_f..</text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:665) (24 samples, 2.40%)</title><rect x="4.8096%" y="1284" width="2.4048%" height="15" fill="rgb(248,47,43)"/><text x="5.0596%" y="1294.50">_l..</text></g><g><title>&lt;module&gt; (pylib/tradesdb/brokerdataparser/__init__.py:293) (74 samples, 7.41%)</title><rect x="0.2004%" y="708" width="7.4148%" height="15" fill="rgb(221,10,30)"/><text x="0.4504%" y="718.50">&lt;module&gt; (..</text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:971) (74 samples, 7.41%)</title><rect x="0.2004%" y="724" width="7.4148%" height="15" fill="rgb(210,229,1)"/><text x="0.4504%" y="734.50">_find_and_..</text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:955) (74 samples, 7.41%)</title><rect x="0.2004%" y="740" width="7.4148%" height="15" fill="rgb(222,148,37)"/><text x="0.4504%" y="750.50">_find_and_..</text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:665) (74 samples, 7.41%)</title><rect x="0.2004%" y="756" width="7.4148%" height="15" fill="rgb(234,67,33)"/><text x="0.4504%" y="766.50">_load_unlo..</text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:678) (74 samples, 7.41%)</title><rect x="0.2004%" y="772" width="7.4148%" height="15" fill="rgb(247,98,35)"/><text x="0.4504%" y="782.50">exec_modul..</text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (74 samples, 7.41%)</title><rect x="0.2004%" y="788" width="7.4148%" height="15" fill="rgb(247,138,52)"/><text x="0.4504%" y="798.50">_call_with..</text></g><g><title>&lt;module&gt; (pylib/tradesdb/brokerdataparser/chinafutureparser.py:10) (74 samples, 7.41%)</title><rect x="0.2004%" y="804" width="7.4148%" height="15" fill="rgb(213,79,30)"/><text x="0.4504%" y="814.50">&lt;module&gt; (..</text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:971) (74 samples, 7.41%)</title><rect x="0.2004%" y="820" width="7.4148%" height="15" fill="rgb(246,177,23)"/><text x="0.4504%" y="830.50">_find_and_..</text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:955) (74 samples, 7.41%)</title><rect x="0.2004%" y="836" width="7.4148%" height="15" fill="rgb(230,62,27)"/><text x="0.4504%" y="846.50">_find_and_..</text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:665) (74 samples, 7.41%)</title><rect x="0.2004%" y="852" width="7.4148%" height="15" fill="rgb(216,154,8)"/><text x="0.4504%" y="862.50">_load_unlo..</text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:678) (74 samples, 7.41%)</title><rect x="0.2004%" y="868" width="7.4148%" height="15" fill="rgb(244,35,45)"/><text x="0.4504%" y="878.50">exec_modul..</text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (74 samples, 7.41%)</title><rect x="0.2004%" y="884" width="7.4148%" height="15" fill="rgb(251,115,12)"/><text x="0.4504%" y="894.50">_call_with..</text></g><g><title>&lt;module&gt; (pandas/__init__.py:55) (61 samples, 6.11%)</title><rect x="1.5030%" y="900" width="6.1122%" height="15" fill="rgb(240,54,50)"/><text x="1.7530%" y="910.50">&lt;module&gt;..</text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:971) (61 samples, 6.11%)</title><rect x="1.5030%" y="916" width="6.1122%" height="15" fill="rgb(233,84,52)"/><text x="1.7530%" y="926.50">_find_an..</text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:955) (61 samples, 6.11%)</title><rect x="1.5030%" y="932" width="6.1122%" height="15" fill="rgb(207,117,47)"/><text x="1.7530%" y="942.50">_find_an..</text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:665) (61 samples, 6.11%)</title><rect x="1.5030%" y="948" width="6.1122%" height="15" fill="rgb(249,43,39)"/><text x="1.7530%" y="958.50">_load_un..</text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:678) (61 samples, 6.11%)</title><rect x="1.5030%" y="964" width="6.1122%" height="15" fill="rgb(209,38,44)"/><text x="1.7530%" y="974.50">exec_mod..</text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (61 samples, 6.11%)</title><rect x="1.5030%" y="980" width="6.1122%" height="15" fill="rgb(236,212,23)"/><text x="1.7530%" y="990.50">_call_wi..</text></g><g><title>&lt;module&gt; (pandas/core/api.py:5) (32 samples, 3.21%)</title><rect x="4.4088%" y="996" width="3.2064%" height="15" fill="rgb(242,79,21)"/><text x="4.6588%" y="1006.50">&lt;mo..</text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:971) (32 samples, 3.21%)</title><rect x="4.4088%" y="1012" width="3.2064%" height="15" fill="rgb(211,96,35)"/><text x="4.6588%" y="1022.50">_fi..</text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:941) (32 samples, 3.21%)</title><rect x="4.4088%" y="1028" width="3.2064%" height="15" fill="rgb(253,215,40)"/><text x="4.6588%" y="1038.50">_fi..</text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (32 samples, 3.21%)</title><rect x="4.4088%" y="1044" width="3.2064%" height="15" fill="rgb(211,81,21)"/><text x="4.6588%" y="1054.50">_ca..</text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:971) (32 samples, 3.21%)</title><rect x="4.4088%" y="1060" width="3.2064%" height="15" fill="rgb(208,190,38)"/><text x="4.6588%" y="1070.50">_fi..</text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:955) (32 samples, 3.21%)</title><rect x="4.4088%" y="1076" width="3.2064%" height="15" fill="rgb(235,213,38)"/><text x="4.6588%" y="1086.50">_fi..</text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:665) (32 samples, 3.21%)</title><rect x="4.4088%" y="1092" width="3.2064%" height="15" fill="rgb(237,122,38)"/><text x="4.6588%" y="1102.50">_lo..</text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:678) (32 samples, 3.21%)</title><rect x="4.4088%" y="1108" width="3.2064%" height="15" fill="rgb(244,218,35)"/><text x="4.6588%" y="1118.50">exe..</text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (32 samples, 3.21%)</title><rect x="4.4088%" y="1124" width="3.2064%" height="15" fill="rgb(240,68,47)"/><text x="4.6588%" y="1134.50">_ca..</text></g><g><title>&lt;module&gt; (pylib/tradesdb/brokerdataparser/__init__.py:8) (719 samples, 72.04%)</title><rect x="9.7194%" y="708" width="72.0441%" height="15" fill="rgb(210,16,53)"/><text x="9.9694%" y="718.50">&lt;module&gt; (pylib/tradesdb/brokerdataparser/__init__.py:8)</text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:971) (719 samples, 72.04%)</title><rect x="9.7194%" y="724" width="72.0441%" height="15" fill="rgb(235,124,12)"/><text x="9.9694%" y="734.50">_find_and_load (&lt;frozen importlib._bootstrap&gt;:971)</text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:955) (719 samples, 72.04%)</title><rect x="9.7194%" y="740" width="72.0441%" height="15" fill="rgb(224,169,11)"/><text x="9.9694%" y="750.50">_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:955)</text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:665) (719 samples, 72.04%)</title><rect x="9.7194%" y="756" width="72.0441%" height="15" fill="rgb(250,166,2)"/><text x="9.9694%" y="766.50">_load_unlocked (&lt;frozen importlib._bootstrap&gt;:665)</text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:678) (719 samples, 72.04%)</title><rect x="9.7194%" y="772" width="72.0441%" height="15" fill="rgb(242,216,29)"/><text x="9.9694%" y="782.50">exec_module (&lt;frozen importlib._bootstrap_external&gt;:678)</text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (719 samples, 72.04%)</title><rect x="9.7194%" y="788" width="72.0441%" height="15" fill="rgb(230,116,27)"/><text x="9.9694%" y="798.50">_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219)</text></g><g><title>&lt;module&gt; (pylib/tradesdb/brokerdataparser/canadaequitycibcparser.py:19) (719 samples, 72.04%)</title><rect x="9.7194%" y="804" width="72.0441%" height="15" fill="rgb(228,99,48)"/><text x="9.9694%" y="814.50">&lt;module&gt; (pylib/tradesdb/brokerdataparser/canadaequitycibcparser.py:19)</text></g><g><title>CIBCCanadaParser (pylib/tradesdb/brokerdataparser/canadaequitycibcparser.py:21) (719 samples, 72.04%)</title><rect x="9.7194%" y="820" width="72.0441%" height="15" fill="rgb(253,11,6)"/><text x="9.9694%" y="830.50">CIBCCanadaParser (pylib/tradesdb/brokerdataparser/canadaequitycibcparser.py:21)</text></g><g><title>make_upload_broker_tasks (airflowlib/tradesdb_tasks.py:839) (818 samples, 81.96%)</title><rect x="0.0000%" y="612" width="81.9639%" height="15" fill="rgb(247,143,39)"/><text x="0.2500%" y="622.50">make_upload_broker_tasks (airflowlib/tradesdb_tasks.py:839)</text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:971) (818 samples, 81.96%)</title><rect x="0.0000%" y="628" width="81.9639%" height="15" fill="rgb(236,97,10)"/><text x="0.2500%" y="638.50">_find_and_load (&lt;frozen importlib._bootstrap&gt;:971)</text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:955) (818 samples, 81.96%)</title><rect x="0.0000%" y="644" width="81.9639%" height="15" fill="rgb(233,208,19)"/><text x="0.2500%" y="654.50">_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:955)</text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:665) (818 samples, 81.96%)</title><rect x="0.0000%" y="660" width="81.9639%" height="15" fill="rgb(216,164,2)"/><text x="0.2500%" y="670.50">_load_unlocked (&lt;frozen importlib._bootstrap&gt;:665)</text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:678) (818 samples, 81.96%)</title><rect x="0.0000%" y="676" width="81.9639%" height="15" fill="rgb(220,129,5)"/><text x="0.2500%" y="686.50">exec_module (&lt;frozen importlib._bootstrap_external&gt;:678)</text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (818 samples, 81.96%)</title><rect x="0.0000%" y="692" width="81.9639%" height="15" fill="rgb(242,17,10)"/><text x="0.2500%" y="702.50">_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219)</text></g><g><title>&lt;module&gt; (fx_daily_test.py:456) (819 samples, 82.06%)</title><rect x="0.0000%" y="596" width="82.0641%" height="15" fill="rgb(242,107,0)"/><text x="0.2500%" y="606.50">&lt;module&gt; (fx_daily_test.py:456)</text></g><g><title>process_file (airflow/models/dagbag.py:256) (823 samples, 82.46%)</title><rect x="0.0000%" y="500" width="82.4649%" height="15" fill="rgb(251,28,31)"/><text x="0.2500%" y="510.50">process_file (airflow/models/dagbag.py:256)</text></g><g><title>load_source (imp.py:172) (823 samples, 82.46%)</title><rect x="0.0000%" y="516" width="82.4649%" height="15" fill="rgb(233,223,10)"/><text x="0.2500%" y="526.50">load_source (imp.py:172)</text></g><g><title>_load (&lt;frozen importlib._bootstrap&gt;:684) (823 samples, 82.46%)</title><rect x="0.0000%" y="532" width="82.4649%" height="15" fill="rgb(215,21,27)"/><text x="0.2500%" y="542.50">_load (&lt;frozen importlib._bootstrap&gt;:684)</text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:665) (823 samples, 82.46%)</title><rect x="0.0000%" y="548" width="82.4649%" height="15" fill="rgb(232,23,21)"/><text x="0.2500%" y="558.50">_load_unlocked (&lt;frozen importlib._bootstrap&gt;:665)</text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:678) (823 samples, 82.46%)</title><rect x="0.0000%" y="564" width="82.4649%" height="15" fill="rgb(244,5,23)"/><text x="0.2500%" y="574.50">exec_module (&lt;frozen importlib._bootstrap_external&gt;:678)</text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (823 samples, 82.46%)</title><rect x="0.0000%" y="580" width="82.4649%" height="15" fill="rgb(226,81,46)"/><text x="0.2500%" y="590.50">_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219)</text></g><g><title>process_file (airflow/jobs/scheduler_job.py:1577) (824 samples, 82.57%)</title><rect x="0.0000%" y="452" width="82.5651%" height="15" fill="rgb(247,70,30)"/><text x="0.2500%" y="462.50">process_file (airflow/jobs/scheduler_job.py:1577)</text></g><g><title>__init__ (airflow/models/dagbag.py:110) (824 samples, 82.57%)</title><rect x="0.0000%" y="468" width="82.5651%" height="15" fill="rgb(212,68,19)"/><text x="0.2500%" y="478.50">__init__ (airflow/models/dagbag.py:110)</text></g><g><title>collect_dags (airflow/models/dagbag.py:434) (824 samples, 82.57%)</title><rect x="0.0000%" y="484" width="82.5651%" height="15" fill="rgb(240,187,13)"/><text x="0.2500%" y="494.50">collect_dags (airflow/models/dagbag.py:434)</text></g><g><title>_execute_clauseelement (sqlalchemy/engine/base.py:1092) (14 samples, 1.40%)</title><rect x="86.6733%" y="756" width="1.4028%" height="15" fill="rgb(223,113,26)"/><text x="86.9233%" y="766.50"></text></g><g><title>&lt;lambda&gt; (&lt;string&gt;:1) (14 samples, 1.40%)</title><rect x="86.6733%" y="772" width="1.4028%" height="15" fill="rgb(206,192,2)"/><text x="86.9233%" y="782.50"></text></g><g><title>compile (sqlalchemy/sql/elements.py:462) (14 samples, 1.40%)</title><rect x="86.6733%" y="788" width="1.4028%" height="15" fill="rgb(241,108,4)"/><text x="86.9233%" y="798.50"></text></g><g><title>_compiler (sqlalchemy/sql/elements.py:468) (14 samples, 1.40%)</title><rect x="86.6733%" y="804" width="1.4028%" height="15" fill="rgb(247,173,49)"/><text x="86.9233%" y="814.50"></text></g><g><title>__init__ (sqlalchemy/sql/compiler.py:571) (14 samples, 1.40%)</title><rect x="86.6733%" y="820" width="1.4028%" height="15" fill="rgb(224,114,35)"/><text x="86.9233%" y="830.50"></text></g><g><title>__init__ (sqlalchemy/sql/compiler.py:319) (13 samples, 1.30%)</title><rect x="86.7735%" y="836" width="1.3026%" height="15" fill="rgb(245,159,27)"/><text x="87.0235%" y="846.50"></text></g><g><title>process (sqlalchemy/sql/compiler.py:350) (13 samples, 1.30%)</title><rect x="86.7735%" y="852" width="1.3026%" height="15" fill="rgb(245,172,44)"/><text x="87.0235%" y="862.50"></text></g><g><title>_compiler_dispatch (sqlalchemy/sql/visitors.py:92) (13 samples, 1.30%)</title><rect x="86.7735%" y="868" width="1.3026%" height="15" fill="rgb(236,23,11)"/><text x="87.0235%" y="878.50"></text></g><g><title>__iter__ (sqlalchemy/orm/query.py:3367) (24 samples, 2.40%)</title><rect x="86.2725%" y="692" width="2.4048%" height="15" fill="rgb(205,117,38)"/><text x="86.5225%" y="702.50">__..</text></g><g><title>_execute_and_instances (sqlalchemy/orm/query.py:3392) (20 samples, 2.00%)</title><rect x="86.6733%" y="708" width="2.0040%" height="15" fill="rgb(237,72,25)"/><text x="86.9233%" y="718.50">_..</text></g><g><title>execute (sqlalchemy/engine/base.py:982) (20 samples, 2.00%)</title><rect x="86.6733%" y="724" width="2.0040%" height="15" fill="rgb(244,70,9)"/><text x="86.9233%" y="734.50">e..</text></g><g><title>_execute_on_connection (sqlalchemy/sql/elements.py:287) (20 samples, 2.00%)</title><rect x="86.6733%" y="740" width="2.0040%" height="15" fill="rgb(217,125,39)"/><text x="86.9233%" y="750.50">_..</text></g><g><title>_get_dep_statuses (airflow/ti_deps/deps/ready_to_reschedule.py:53) (39 samples, 3.91%)</title><rect x="84.8697%" y="628" width="3.9078%" height="15" fill="rgb(235,36,10)"/><text x="85.1197%" y="638.50">_get..</text></g><g><title>wrapper (airflow/utils/db.py:74) (39 samples, 3.91%)</title><rect x="84.8697%" y="644" width="3.9078%" height="15" fill="rgb(251,123,47)"/><text x="85.1197%" y="654.50">wrap..</text></g><g><title>find_for_task_instance (airflow/models/taskreschedule.py:83) (30 samples, 3.01%)</title><rect x="85.7715%" y="660" width="3.0060%" height="15" fill="rgb(221,13,13)"/><text x="86.0215%" y="670.50">fin..</text></g><g><title>all (sqlalchemy/orm/query.py:3211) (30 samples, 3.01%)</title><rect x="85.7715%" y="676" width="3.0060%" height="15" fill="rgb(238,131,9)"/><text x="86.0215%" y="686.50">all..</text></g><g><title>__exit__ (contextlib.py:88) (14 samples, 1.40%)</title><rect x="88.7776%" y="660" width="1.4028%" height="15" fill="rgb(211,50,8)"/><text x="89.0276%" y="670.50"></text></g><g><title>get_dep_statuses (airflow/ti_deps/deps/base_ti_dep.py:106) (66 samples, 6.61%)</title><rect x="84.4689%" y="612" width="6.6132%" height="15" fill="rgb(245,182,24)"/><text x="84.7189%" y="622.50">get_dep_s..</text></g><g><title>_get_dep_statuses (airflow/ti_deps/deps/trigger_rule_dep.py:75) (23 samples, 2.30%)</title><rect x="88.7776%" y="628" width="2.3046%" height="15" fill="rgb(242,14,37)"/><text x="89.0276%" y="638.50">_..</text></g><g><title>wrapper (airflow/utils/db.py:74) (23 samples, 2.30%)</title><rect x="88.7776%" y="644" width="2.3046%" height="15" fill="rgb(246,228,12)"/><text x="89.0276%" y="654.50">w..</text></g><g><title>_get_ready_tis (airflow/models/dagrun.py:336) (69 samples, 6.91%)</title><rect x="84.3687%" y="548" width="6.9138%" height="15" fill="rgb(213,55,15)"/><text x="84.6187%" y="558.50">_get_read..</text></g><g><title>wrapper (airflow/utils/db.py:70) (69 samples, 6.91%)</title><rect x="84.3687%" y="564" width="6.9138%" height="15" fill="rgb(209,9,3)"/><text x="84.6187%" y="574.50">wrapper (..</text></g><g><title>are_dependencies_met (airflow/models/taskinstance.py:659) (68 samples, 6.81%)</title><rect x="84.4689%" y="580" width="6.8136%" height="15" fill="rgb(230,59,30)"/><text x="84.7189%" y="590.50">are_depen..</text></g><g><title>get_failed_dep_statuses (airflow/models/taskinstance.py:683) (68 samples, 6.81%)</title><rect x="84.4689%" y="596" width="6.8136%" height="15" fill="rgb(209,121,21)"/><text x="84.7189%" y="606.50">get_faile..</text></g><g><title>__iter__ (sqlalchemy/orm/query.py:3363) (11 samples, 1.10%)</title><rect x="92.1844%" y="612" width="1.1022%" height="15" fill="rgb(220,109,13)"/><text x="92.4344%" y="622.50"></text></g><g><title>&lt;listcomp&gt; (sqlalchemy/sql/compiler.py:2114) (16 samples, 1.60%)</title><rect x="94.7896%" y="820" width="1.6032%" height="15" fill="rgb(232,18,1)"/><text x="95.0396%" y="830.50"></text></g><g><title>_label_select_column (sqlalchemy/sql/compiler.py:1866) (11 samples, 1.10%)</title><rect x="95.2906%" y="836" width="1.1022%" height="15" fill="rgb(215,41,42)"/><text x="95.5406%" y="846.50"></text></g><g><title>_compiler_dispatch (sqlalchemy/sql/visitors.py:92) (11 samples, 1.10%)</title><rect x="95.2906%" y="852" width="1.1022%" height="15" fill="rgb(224,123,36)"/><text x="95.5406%" y="862.50"></text></g><g><title>visit_label (sqlalchemy/sql/compiler.py:829) (10 samples, 1.00%)</title><rect x="95.3908%" y="868" width="1.0020%" height="15" fill="rgb(240,125,3)"/><text x="95.6408%" y="878.50"></text></g><g><title>visit_select (sqlalchemy/sql/compiler.py:2114) (18 samples, 1.80%)</title><rect x="94.6894%" y="804" width="1.8036%" height="15" fill="rgb(205,98,50)"/><text x="94.9394%" y="814.50">v..</text></g><g><title>_execute_clauseelement (sqlalchemy/engine/base.py:1092) (27 samples, 2.71%)</title><rect x="94.2886%" y="676" width="2.7054%" height="15" fill="rgb(205,185,37)"/><text x="94.5386%" y="686.50">_e..</text></g><g><title>&lt;lambda&gt; (&lt;string&gt;:1) (27 samples, 2.71%)</title><rect x="94.2886%" y="692" width="2.7054%" height="15" fill="rgb(238,207,15)"/><text x="94.5386%" y="702.50">&lt;l..</text></g><g><title>compile (sqlalchemy/sql/elements.py:462) (27 samples, 2.71%)</title><rect x="94.2886%" y="708" width="2.7054%" height="15" fill="rgb(213,199,42)"/><text x="94.5386%" y="718.50">co..</text></g><g><title>_compiler (sqlalchemy/sql/elements.py:468) (27 samples, 2.71%)</title><rect x="94.2886%" y="724" width="2.7054%" height="15" fill="rgb(235,201,11)"/><text x="94.5386%" y="734.50">_c..</text></g><g><title>__init__ (sqlalchemy/sql/compiler.py:571) (24 samples, 2.40%)</title><rect x="94.5892%" y="740" width="2.4048%" height="15" fill="rgb(207,46,11)"/><text x="94.8392%" y="750.50">__..</text></g><g><title>__init__ (sqlalchemy/sql/compiler.py:319) (23 samples, 2.30%)</title><rect x="94.6894%" y="756" width="2.3046%" height="15" fill="rgb(241,35,35)"/><text x="94.9394%" y="766.50">_..</text></g><g><title>process (sqlalchemy/sql/compiler.py:350) (23 samples, 2.30%)</title><rect x="94.6894%" y="772" width="2.3046%" height="15" fill="rgb(243,32,47)"/><text x="94.9394%" y="782.50">p..</text></g><g><title>_compiler_dispatch (sqlalchemy/sql/visitors.py:92) (23 samples, 2.30%)</title><rect x="94.6894%" y="788" width="2.3046%" height="15" fill="rgb(247,202,23)"/><text x="94.9394%" y="798.50">_..</text></g><g><title>__iter__ (sqlalchemy/orm/query.py:3367) (48 samples, 4.81%)</title><rect x="93.2866%" y="612" width="4.8096%" height="15" fill="rgb(219,102,11)"/><text x="93.5366%" y="622.50">__iter..</text></g><g><title>_execute_and_instances (sqlalchemy/orm/query.py:3392) (39 samples, 3.91%)</title><rect x="94.1884%" y="628" width="3.9078%" height="15" fill="rgb(243,110,44)"/><text x="94.4384%" y="638.50">_exe..</text></g><g><title>execute (sqlalchemy/engine/base.py:982) (39 samples, 3.91%)</title><rect x="94.1884%" y="644" width="3.9078%" height="15" fill="rgb(222,74,54)"/><text x="94.4384%" y="654.50">exec..</text></g><g><title>_execute_on_connection (sqlalchemy/sql/elements.py:287) (39 samples, 3.91%)</title><rect x="94.1884%" y="660" width="3.9078%" height="15" fill="rgb(216,99,12)"/><text x="94.4384%" y="670.50">_exe..</text></g><g><title>_execute_clauseelement (sqlalchemy/engine/base.py:1101) (11 samples, 1.10%)</title><rect x="96.9940%" y="676" width="1.1022%" height="15" fill="rgb(226,22,26)"/><text x="97.2440%" y="686.50"></text></g><g><title>all (sqlalchemy/orm/query.py:3211) (75 samples, 7.52%)</title><rect x="92.0842%" y="596" width="7.5150%" height="15" fill="rgb(217,163,10)"/><text x="92.3342%" y="606.50">all (sqlal..</text></g><g><title>all (998 samples, 100%)</title><rect x="0.0000%" y="36" width="100.0000%" height="15" fill="rgb(213,25,53)"/><text x="0.2500%" y="46.50"></text></g><g><title>&lt;module&gt; (airflow:37) (998 samples, 100.00%)</title><rect x="0.0000%" y="52" width="100.0000%" height="15" fill="rgb(252,105,26)"/><text x="0.2500%" y="62.50">&lt;module&gt; (airflow:37)</text></g><g><title>wrapper (airflow/utils/cli.py:76) (998 samples, 100.00%)</title><rect x="0.0000%" y="68" width="100.0000%" height="15" fill="rgb(220,39,43)"/><text x="0.2500%" y="78.50">wrapper (airflow/utils/cli.py:76)</text></g><g><title>scheduler (airflow/bin/cli.py:1213) (998 samples, 100.00%)</title><rect x="0.0000%" y="84" width="100.0000%" height="15" fill="rgb(229,68,48)"/><text x="0.2500%" y="94.50">scheduler (airflow/bin/cli.py:1213)</text></g><g><title>run (airflow/jobs/base_job.py:218) (998 samples, 100.00%)</title><rect x="0.0000%" y="100" width="100.0000%" height="15" fill="rgb(252,8,32)"/><text x="0.2500%" y="110.50">run (airflow/jobs/base_job.py:218)</text></g><g><title>_execute (airflow/jobs/scheduler_job.py:1382) (998 samples, 100.00%)</title><rect x="0.0000%" y="116" width="100.0000%" height="15" fill="rgb(223,20,43)"/><text x="0.2500%" y="126.50">_execute (airflow/jobs/scheduler_job.py:1382)</text></g><g><title>_execute_helper (airflow/jobs/scheduler_job.py:1425) (998 samples, 100.00%)</title><rect x="0.0000%" y="132" width="100.0000%" height="15" fill="rgb(229,81,49)"/><text x="0.2500%" y="142.50">_execute_helper (airflow/jobs/scheduler_job.py:1425)</text></g><g><title>start (airflow/utils/dag_processing.py:560) (998 samples, 100.00%)</title><rect x="0.0000%" y="148" width="100.0000%" height="15" fill="rgb(236,28,36)"/><text x="0.2500%" y="158.50">start (airflow/utils/dag_processing.py:560)</text></g><g><title>start (multiprocessing/process.py:105) (998 samples, 100.00%)</title><rect x="0.0000%" y="164" width="100.0000%" height="15" fill="rgb(249,185,26)"/><text x="0.2500%" y="174.50">start (multiprocessing/process.py:105)</text></g><g><title>_Popen (multiprocessing/context.py:277) (998 samples, 100.00%)</title><rect x="0.0000%" y="180" width="100.0000%" height="15" fill="rgb(249,174,33)"/><text x="0.2500%" y="190.50">_Popen (multiprocessing/context.py:277)</text></g><g><title>__init__ (multiprocessing/popen_fork.py:19) (998 samples, 100.00%)</title><rect x="0.0000%" y="196" width="100.0000%" height="15" fill="rgb(233,201,37)"/><text x="0.2500%" y="206.50">__init__ (multiprocessing/popen_fork.py:19)</text></g><g><title>_launch (multiprocessing/popen_fork.py:73) (998 samples, 100.00%)</title><rect x="0.0000%" y="212" width="100.0000%" height="15" fill="rgb(221,78,26)"/><text x="0.2500%" y="222.50">_launch (multiprocessing/popen_fork.py:73)</text></g><g><title>_bootstrap (multiprocessing/process.py:258) (998 samples, 100.00%)</title><rect x="0.0000%" y="228" width="100.0000%" height="15" fill="rgb(250,127,30)"/><text x="0.2500%" y="238.50">_bootstrap (multiprocessing/process.py:258)</text></g><g><title>run (multiprocessing/process.py:93) (998 samples, 100.00%)</title><rect x="0.0000%" y="244" width="100.0000%" height="15" fill="rgb(230,49,44)"/><text x="0.2500%" y="254.50">run (multiprocessing/process.py:93)</text></g><g><title>_run_processor_manager (airflow/utils/dag_processing.py:634) (998 samples, 100.00%)</title><rect x="0.0000%" y="260" width="100.0000%" height="15" fill="rgb(229,67,23)"/><text x="0.2500%" y="270.50">_run_processor_manager (airflow/utils/dag_processing.py:634)</text></g><g><title>start (airflow/utils/dag_processing.py:886) (998 samples, 100.00%)</title><rect x="0.0000%" y="276" width="100.0000%" height="15" fill="rgb(249,83,47)"/><text x="0.2500%" y="286.50">start (airflow/utils/dag_processing.py:886)</text></g><g><title>start_new_processes (airflow/utils/dag_processing.py:1250) (998 samples, 100.00%)</title><rect x="0.0000%" y="292" width="100.0000%" height="15" fill="rgb(215,43,3)"/><text x="0.2500%" y="302.50">start_new_processes (airflow/utils/dag_processing.py:1250)</text></g><g><title>start (airflow/jobs/scheduler_job.py:201) (998 samples, 100.00%)</title><rect x="0.0000%" y="308" width="100.0000%" height="15" fill="rgb(238,154,13)"/><text x="0.2500%" y="318.50">start (airflow/jobs/scheduler_job.py:201)</text></g><g><title>start (multiprocessing/process.py:105) (998 samples, 100.00%)</title><rect x="0.0000%" y="324" width="100.0000%" height="15" fill="rgb(219,56,2)"/><text x="0.2500%" y="334.50">start (multiprocessing/process.py:105)</text></g><g><title>_Popen (multiprocessing/context.py:277) (998 samples, 100.00%)</title><rect x="0.0000%" y="340" width="100.0000%" height="15" fill="rgb(233,0,4)"/><text x="0.2500%" y="350.50">_Popen (multiprocessing/context.py:277)</text></g><g><title>__init__ (multiprocessing/popen_fork.py:19) (998 samples, 100.00%)</title><rect x="0.0000%" y="356" width="100.0000%" height="15" fill="rgb(235,30,7)"/><text x="0.2500%" y="366.50">__init__ (multiprocessing/popen_fork.py:19)</text></g><g><title>_launch (multiprocessing/popen_fork.py:73) (998 samples, 100.00%)</title><rect x="0.0000%" y="372" width="100.0000%" height="15" fill="rgb(250,79,13)"/><text x="0.2500%" y="382.50">_launch (multiprocessing/popen_fork.py:73)</text></g><g><title>_bootstrap (multiprocessing/process.py:258) (998 samples, 100.00%)</title><rect x="0.0000%" y="388" width="100.0000%" height="15" fill="rgb(211,146,34)"/><text x="0.2500%" y="398.50">_bootstrap (multiprocessing/process.py:258)</text></g><g><title>run (multiprocessing/process.py:93) (998 samples, 100.00%)</title><rect x="0.0000%" y="404" width="100.0000%" height="15" fill="rgb(228,22,38)"/><text x="0.2500%" y="414.50">run (multiprocessing/process.py:93)</text></g><g><title>_run_file_processor (airflow/jobs/scheduler_job.py:159) (998 samples, 100.00%)</title><rect x="0.0000%" y="420" width="100.0000%" height="15" fill="rgb(235,168,5)"/><text x="0.2500%" y="430.50">_run_file_processor (airflow/jobs/scheduler_job.py:159)</text></g><g><title>wrapper (airflow/utils/db.py:74) (998 samples, 100.00%)</title><rect x="0.0000%" y="436" width="100.0000%" height="15" fill="rgb(221,155,16)"/><text x="0.2500%" y="446.50">wrapper (airflow/utils/db.py:74)</text></g><g><title>process_file (airflow/jobs/scheduler_job.py:1620) (164 samples, 16.43%)</title><rect x="83.5671%" y="452" width="16.4329%" height="15" fill="rgb(215,215,53)"/><text x="83.8171%" y="462.50">process_file (airflow/job..</text></g><g><title>_process_dags (airflow/jobs/scheduler_job.py:1299) (164 samples, 16.43%)</title><rect x="83.5671%" y="468" width="16.4329%" height="15" fill="rgb(223,4,10)"/><text x="83.8171%" y="478.50">_process_dags (airflow/jo..</text></g><g><title>wrapper (airflow/utils/db.py:74) (164 samples, 16.43%)</title><rect x="83.5671%" y="484" width="16.4329%" height="15" fill="rgb(234,103,6)"/><text x="83.8171%" y="494.50">wrapper (airflow/utils/db..</text></g><g><title>_process_task_instances (airflow/jobs/scheduler_job.py:793) (158 samples, 15.83%)</title><rect x="84.1683%" y="500" width="15.8317%" height="15" fill="rgb(227,97,0)"/><text x="84.4183%" y="510.50">_process_task_instances ..</text></g><g><title>wrapper (airflow/utils/db.py:70) (158 samples, 15.83%)</title><rect x="84.1683%" y="516" width="15.8317%" height="15" fill="rgb(234,150,53)"/><text x="84.4183%" y="526.50">wrapper (airflow/utils/d..</text></g><g><title>update_state (airflow/models/dagrun.py:280) (156 samples, 15.63%)</title><rect x="84.3687%" y="532" width="15.6313%" height="15" fill="rgb(228,201,54)"/><text x="84.6187%" y="542.50">update_state (airflow/mo..</text></g><g><title>_get_ready_tis (airflow/models/dagrun.py:338) (87 samples, 8.72%)</title><rect x="91.2826%" y="548" width="8.7174%" height="15" fill="rgb(222,22,37)"/><text x="91.5326%" y="558.50">_get_ready_t..</text></g><g><title>wrapper (airflow/utils/db.py:70) (87 samples, 8.72%)</title><rect x="91.2826%" y="564" width="8.7174%" height="15" fill="rgb(237,53,32)"/><text x="91.5326%" y="574.50">wrapper (air..</text></g><g><title>current_state (airflow/models/taskinstance.py:438) (81 samples, 8.12%)</title><rect x="91.8838%" y="580" width="8.1162%" height="15" fill="rgb(233,25,53)"/><text x="92.1338%" y="590.50">current_sta..</text></g></svg></svg>
